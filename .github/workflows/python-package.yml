# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
          # python-version: [3.7, 3.8, 3.9]
          python-version: [3.7]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        #if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    #- name: Lint with flake8
    #  run: |
    #    # stop the build if there are Python syntax errors or undefined names
    #    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #    # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #    flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Build Wheel
      if: ${{ !env.ACT }}
      run: |
        ./run_manylinux_build.sh
        echo "====="
    - name: Install Wheel
      if: ${{ !env.ACT }}
      run: |
        ls -al
        ls -al wheelhouse
        MB_PYTHON_TAG=$(python -c "import setup; print(setup.MB_PYTHON_TAG)") 
        VERSION=$(python -c "import setup; print(setup.VERSION)") 
        echo "MB_PYTHON_TAG = $MB_PYTHON_TAG"
        echo "VERSION = $VERSION"
        BDIST_WHEEL_PATH=$(ls wheelhouse/*-${VERSION}-${MB_PYTHON_TAG}-*2010_x86_64.whl)
        echo "BDIST_WHEEL_PATH = $BDIST_WHEEL_PATH"
        python -m pip install $BDIST_WHEEL_PATH[all]
    - name: Test Wheel
      if: ${{ !env.ACT }}
      run: |
        python run_tests.py
    - name: Sign and Publish
      if: ${{ !env.ACT }}
      run: |
        GPG_EXECUTABLE=gpg
        $GPG_EXECUTABLE --version
        openssl version
        $GPG_EXECUTABLE --list-keys
        export PYUTILS_CI_GITHUB_SECRET=${{ secrets.PYUTILS_CI_GITHUB_SECRET }}
        TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
        TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
        TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_secret_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
        $GPG_EXECUTABLE --list-keys
        MB_PYTHON_TAG=$(python -c "import setup; print(setup.MB_PYTHON_TAG)")
        VERSION=$(python -c "import setup; print(setup.VERSION)") 
        pip install twine
        pip install six pyopenssl ndg-httpsclient pyasn1 -U --user
        pip install requests[security] twine --user
        GPG_KEYID=$(cat dev/public_gpg_key)
        echo "GPG_KEYID = '$GPG_KEYID'"
        #
        export TWINE_REPOSITORY_URL=https://pypi.python.org/pypi
        export PYUTILS_TEST_TWINE_USERNAME=${{ secrets.PYUTILS_TEST_TWINE_USERNAME }}
        export PYUTILS_TEST_TWINE_PASSWORD=${{ secrets.PYUTILS_TEST_TWINE_PASSWORD }}
        MB_PYTHON_TAG=$MB_PYTHON_TAG \
            DO_GPG=True GPG_KEYID=$GPG_KEYID \
            TWINE_PASSWORD=$PYUTILS_TEST_TWINE_PASSWORD \
            TWINE_USERNAME=$PYUTILS_TEST_TWINE_USERNAME \
            GPG_EXECUTABLE=$GPG_EXECUTABLE \
            DO_UPLOAD=True \
            DO_TAG=False ./publish.sh 
        #
        #export PYUTILS_TWINE_USERNAME=${{ secrets.PYUTILS_TWINE_USERNAME }}
        #export PYUTILS_TWINE_PASSWORD=${{ secrets.PYUTILS_TWINE_PASSWORD }}
        #export TWINE_REPOSITORY_URL=https://test.pypi.org/legacy/
        #MB_PYTHON_TAG=$MB_PYTHON_TAG \
        #    DO_GPG=True GPG_KEYID=$GPG_KEYID \
        #    TWINE_PASSWORD=$PYUTILS_TWINE_PASSWORD \
        #    TWINE_USERNAME=$PYUTILS_TWINE_USERNAME \
        #    GPG_EXECUTABLE=$GPG_EXECUTABLE \
        #    DO_UPLOAD=True \
        #    DO_TAG=False ./publish.sh 
    

  #deploy:
  #  runs-on: ubuntu-latest
  #  steps:
  #  - uses: actions/checkout@v2
  #  - name: Set up Python
  #    uses: actions/setup-python@v2
  #    with:
  #      python-version: '3.x'
  #  - name: Install dependencies
  #    run: |
  #      python -m pip install --upgrade pip
  #      pip install setuptools wheel twine
  #  - name: Build and publish
  #    env:
  #      TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
  #      TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #    run: |
  #      python setup.py sdist bdist_wheel
  #      twine upload dist/*
       
###

#__doc__: |
#    # How to run locally
#    # https://packaging.python.org/guides/using-testpypi/
#    cd $HOME/code
#    git clone https://github.com/nektos/act.git $HOME/code/act
#    cd $HOME/code/act
#    chmod +x install.sh
#    ./install.sh -b $HOME/.local/opt/act
#    cd $HOME/code/line_profiler

#    load_secrets
#    $HOME/.local/opt/act/act \
#        --secret=PYUTILS_TWINE_PASSWORD=$PYUTILS_TWINE_PASSWORD \
#        --secret=PYUTILS_TWINE_USERNAME=$PYUTILS_TWINE_USERNAME \
#        --secret=PYUTILS_CI_GITHUB_SECRET=$PYUTILS_CI_GITHUB_SECRET \
#        --secret=PYUTILS_TEST_TWINE_USERNAME=$PYUTILS_TEST_TWINE_USERNAME \
#        --secret=PYUTILS_TEST_TWINE_PASSWORD=$PYUTILS_TEST_TWINE_PASSWORD 
