language: python
sudo: false

env:
    global:
        - secure: "oPQjkw/3e9fhKRl/l6xNlTvXHRWXVwfD0EIrMe10h74qZKm8Gm9TMaT3na5/zKbeodNna6if80aJLJ7LQT6/mKqxX7n7S8Xl7Pw1mbEXpLI11II9PmXxENWrBOsZxpVge1JnP3flwOfzeIGXdnTLd/LZ5VjmyAZBwy6QsXY/FlJ1vtZLJ+2OJLD77WUcDfQEqRW5ZnfJfsNWSTbNUjMLih2fgcAhminpwAapLyibLSUbcNbNTjtzqxKj995eR7DjyTUh/Nm0U8fRkuuPnf1oCf2onWl9EIfwMOXD84C+19kvnR3azVGKt9KpSHyX5j9/p7sKaIGC7WlnX3i4k7iqAPHTzAlSu0PXPREy+5d8ttvx7N9jTlXZKD5im3muL3NU6Pp0qfflhZTvHt5cPHw2zaEwn8I/Tnkma1GhcbRLV5FhjUol6PmOUJItTJ56ga2yqd0ITIiMnjlzopxRFgapRT8wfED89dWivCowyMr5yIpYdS1MY6ogrmX7X+Bfw9RaULQ51GdJ34k6wYWfroKxqawqVAOyH9+LSmcWMiKLgpKgbQTi+Q7qrtUC3pZhH4q2PI0XK/x4uWKvD8b6nM6JmlR1qOU21++xaz4LLkUp8z2P3HnVwI9OZXTk0DvIy3mLCUveHeKQP4vMj+W2JEI+zgdwt4w7N5eeleCPMeae+x0="

        - secure: "W/OXlbv8mt7LRsRcd9sbff1TJ68beGScyQFTlEXMIUhfA6JjZ6w1+eDGF+14zBJ1JM2DtavpSIQsQiHEYLWdz+BAPN7be88+jMhiLhTar3AF6kiGmq0ao5PDGidXW9dNRTgjeWcFYsmyXsxXbazyYSyEVXC5j5P0yIVDtAcb167MpQWaKXHwyJq+fX5rxFeyguyeyondi/pZnmJACFQLRZNUhmYzJgi6x5nxCDz7wZdHrUydySRHIfwowWb/BNd098XvLHTkYe5wUHzIo4h3awq/C/nOHZdhFc5i89smNf80+64f7iVGLVTPjg9JBPocCZpfJE1FlMgH+C7MCvK7ERXPIyfQfYDMeyuCkNiPiaRK7gkyV+CD4zOy+7WarH8TxCXkrlX0B0O0iMy/N7pRMav5x1SpFdCCCRXs2sKLKRZqL2joMYT6JCuBsfNxrBm25eBvwU/SBKC7MkP1gbnbG5l/jpuKm3tcfL64ca5F7hCrlGu3XRTu/xMaMrkgwPe0W8MbirheXkC3qSfJ15XZ2eFDv3qYysKAfSkj0cg1Hv7UCV7C8CFJ1AsZzSC2cBUbCmxWAzxPD8Ra2sOfC4iuKfBKBUvlfgbEzTF8orz6uvJ3Zz9dipbOVH+kCupfiZlPBG/mRtWviFfqaFCB0ttBEji/NFn/hn76xscRvg7UlrI="

        - secure: "MBOZZi3jsAFg7obXVbkZrpffuBJxOnr/djLmGP1nMk06ugwy6Hhm11ek6zfEp8Ddm3uPCICOBpJO7SwuyLhBEbMak0RxVDsVVd08AWEI1Q8g6qNkWo/ko8zqRtmun/Anax7Iy+9ALlwl9plJCA8c6JlAKhgx+XenE8tFLxu6zubgFe/AyQB1Vrdk2AmHWp1kM2L1F1gMP+YEwHSC1+lc55uMSQ1fqToN1Pz7QLL4yvwcet93yEiiWC6ZWvjuAW+x0ETvbf2mhDDSIu03FD2t17mmr2zcP+gIBuxu5pDOcPjf9FVfB/Vg0W3DbnUXcKOP5cSQLy3453eHm+ms+kkb+iwsOoYlM2lkXJfD4A1TZ1oDBhq4ioGaaZh6qYU5mchkf7OlJutkMUgge9UnDvr0cphO6TEZeq3VOUz4NSyWvIo+gZAj6xq4yegZiIUsoRVfQpZqz2pC+wfrerIoCYOwQ/IrJ0EFOyUA+GnQjrEr2Y/4bcXB/ofW9NJYM7q+/Hq6ya3SvNvV6I9oTVBZiqVS2UqXDbxS85YyHiDpDADYlm7xxI/kLOwC0KsxVSWafpFONy3pioc/v6A1reJLHJXMiLDEurmHVHsRt6KWfYlR1KFtAog13OfqvS8hquuW9On9OC1nObwBDG6d61IiPP6lIZhQ4FXWc08XYdU0r8tKhv4="

cache:
  apt: true
  directories:
  - $HOME/.cache/pip
  - $HOME/download
  - $HOME/.pip-cache
  - $HOME/gpg_install_prefix

matrix:
  fast_finish: true
  allow_failures:
    - python: "nightly"
  include:
      - os: linux
        name: Linux
        python:
            - "2.7"
            - "3.5"
            - "3.6"
            - "3.7"
            - "3.8"
            - "nightly"
        before_install:
            - python --version
            - pip --version
        env:
            - BUILD_TARGET=linux
            - PYTHON_BIN=python
        addons:
          apt:
            packages:
            - patchelf
      # --- OSX --- #
      - os: osx
        name: macOS
        osx_image: xcode11.2
        language: shell 
        before_install:
            - python3 --version;
            - pip3 --version;
        env:
            - BUILD_TARGET=macos
            - PYTHON_BIN=python3
      # --- WIN32-x64 --- #
      - os: windows
        language: shell 
        name: windows64
        before_install:
            - choco install python3 --version=3.7.5;
            - python -m pip install --upgrade pip;
            - python --version;
            - pip3 --version;
        env:
            - BUILD_TARGET=windows64
            - PATH=/c/Python37:/c/Python37/Scripts:$PATH
            - PYTHON_BIN=python
      # --- WIN32-x86 --- #
      - os: windows
        language: shell
        name: windows32
        before_install:
            - choco install python3 --forcex86 --version=3.7.5;
            - python -m pip install --upgrade pip;
            - python --version;
            - pip3 --version;
        env:
            - BUILD_TARGET=windows32
            - PATH=/c/Python37:/c/Python37/Scripts:$PATH
            - PYTHON_BIN=python
      
before_install:
  - $PYTHON_BIN -m pip install pip -U
  - $PYTHON_BIN -m pip install -r requirements.txt 
  - |
      if [[ "${BUILD_TARGET}" = "macos" ]]; then
          $PYTHON_BIN -m pip install delocate;
      fi
  - |
      if [[ "${BUILD_TARGET}" = "linux" ]]; then
          docker pull quay.io/pypa/manylinux2010_x86_64:latest
      fi

install:
    - $PYTHON_BIN -m pip install -r requirements/build.txt 
    - |
        if [[ "${BUILD_TARGET}" = "linux" ]]; then
            set -x
            MB_PYTHON_TAG=$($PYTHON_BIN -c "import setup; print(setup.MB_PYTHON_TAG)") 
            VERSION=$($PYTHON_BIN -c "import setup; print(setup.VERSION)") 
            echo "VERSION = $VERSION"
            echo "MB_PYTHON_TAG = $MB_PYTHON_TAG"
            MB_PYTHON_TAG=$MB_PYTHON_TAG ./run_multibuild.sh
            BDIST_WHEEL_PATH=$(ls wheelhouse/*-$VERSION-$MB_PYTHON_TAG*.whl)
            echo "BDIST_WHEEL_PATH = $BDIST_WHEEL_PATH"
            $PYTHON_BIN -m pip install $BDIST_WHEEL_PATH
            set +x
        fi
    - |
        if [[ "${BUILD_TARGET}" = "macos" ]]; then
            set -x
            $PYTHON_BIN setup.py bdist_wheel
            delocate-wheel -w wheelhouse -v dist/*.whl;
            ls wheelhouse/*any.whl | sed -e 'p;s/any/macosx_10_9_x86_64/' | xargs -n2 mv;
            $PYTHON_BIN setup.py install
            set +x
        fi
    - |
        if [[ "${BUILD_TARGET}" = "windows64" ]]; then
            set -x
            $PYTHON_BIN setup.py bdist_wheel
            mkdir wheelhouse;
            ls dist/*any.whl | sed -e 'p;s/any/win_amd64/' | xargs -n2 cp;
            mv dist/*win_amd64.whl wheelhouse/;
            $PYTHON_BIN setup.py install
            set +x
        fi
    - |
        if [[ "${BUILD_TARGET}" = "windows32" ]]; then
            set -x
            $PYTHON_BIN setup.py bdist_wheel
            mkdir wheelhouse;
            ls dist/*any.whl | sed -e 'p;s/any/win32/' | xargs -n2 cp;
            mv dist/*win32.whl wheelhouse/;
            $PYTHON_BIN setup.py install
            set +x
        fi
    
script: 
  # Test the installed wheel
  - cd tests && travis_wait $PYTHON_BIN -m pytest && cd ..

after_success: 
    - |
      if [[ "${BUILD_TARGET}" = "macos" ]]; then
        echo "todo deploy osx"
      fi
    - |
      if [[ "${BUILD_TARGET}" = "windows64" ]]; then
        echo "todo deploy win64"
      fi
    - |
      if [[ "${BUILD_TARGET}" = "windows32" ]]; then
        echo "todo deploy win32"
      fi
    - | 
      if [[ "${BUILD_TARGET}" = "linux" ]]; then
        codecov 
        openssl version
        # Install a more recent version of GPG
        # https://gnupg.org/download/
        export GPG_INSTALL_PREFIX=$HOME/gpg_install_prefix
        export LD_LIBRARY_PATH=$GPG_INSTALL_PREFIX/lib:$LD_LIBRARY_PATH
        export PATH=$GPG_INSTALL_PREFIX/bin:$PATH
        export CPATH=$GPG_INSTALL_PREFIX/include:$CPATH
        export GPG_EXECUTABLE=$GPG_INSTALL_PREFIX/bin/gpg
        ls $GPG_INSTALL_PREFIX
        ls $GPG_INSTALL_PREFIX/bin || echo "no bin"
        if [[ ! -f "$GPG_INSTALL_PREFIX/bin/gpg" ]]; then
            # try and have travis cache this
            mkdir -p $GPG_INSTALL_PREFIX
            echo $GPG_INSTALL_PREFIX
            OLD=$(pwd)
            cd $GPG_INSTALL_PREFIX
            pip install ubelt
            ERROR_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.36.tar.bz2',
                hash_prefix='6e5f853f77dc04f0091d94b224cab8e669042450f271b78d0ea0219',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            GCRYPT_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.8.5.tar.bz2',
                hash_prefix='b55e16e838d1b1208e7673366971ae7c0f9c1c79e042f41c03d1',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            KSBA_CRYPT_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libksba/libksba-1.3.5.tar.bz2',
                hash_prefix='60179bfd109b7b4fd8d2b30a3216540f03f5a13620d9a5b63f1f95',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            ASSUAN_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/libassuan/libassuan-2.5.3.tar.bz2',
                hash_prefix='e7ccb651ea75b07b2e687d48d86d0ab83cba8e2af7f30da2aec',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            NTBLTLS_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/ntbtls/ntbtls-0.1.2.tar.bz2',
                hash_prefix='54468208359dc88155b14cba37773984d7d6f0f37c7a4ce13868d',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            NPTH_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/npth/npth-1.6.tar.bz2',
                hash_prefix='2ed1012e14a9d10665420b9a23628be7e206fd9348111ec751349b',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            GPG_FPATH=$(python -c "import ubelt as ub; print(ub.grabdata(
                'https://gnupg.org/ftp/gcrypt/gnupg/gnupg-2.2.17.tar.bz2',
                hash_prefix='a3cd094addac62b4b4ec1683005a2bec761ea2aacf6daf904316b',
                dpath=ub.ensuredir('$HOME/.pip-cache'), verbose=0))")
            tar xjf $ERROR_FPATH
            tar xjf $GCRYPT_FPATH
            tar xjf $KSBA_CRYPT_FPATH
            tar xjf $ASSUAN_FPATH
            tar xjf $NTBLTLS_FPATH
            tar xjf $NPTH_FPATH
            tar xjf $GPG_FPATH
            (cd libgpg-error-1.36 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libgcrypt-1.8.5 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libksba-1.3.5 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd libassuan-2.5.3 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd ntbtls-0.1.2 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd npth-1.6 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            (cd gnupg-2.2.17 && ./configure --prefix=$GPG_INSTALL_PREFIX && make install)
            echo "GPG_EXECUTABLE = '$GPG_EXECUTABLE'"
            cd $OLD
        fi
        # Decrypt and import GPG Keys / trust
        $GPG_EXECUTABLE --version
        openssl version
        $GPG_EXECUTABLE --list-keys
        TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
        TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
        TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_secret_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
        $GPG_EXECUTABLE --list-keys
        MB_PYTHON_TAG=$(python -c "import setup; print(setup.MB_PYTHON_TAG)")
        VERSION=$(python -c "import setup; print(setup.VERSION)") 
        pip install twine
        if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
          pip install six pyopenssl ndg-httpsclient pyasn1 -U --user
          pip install requests[security] twine --user
        elfi
        if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          pip install six twine
          pip install --upgrade pyOpenSSL
        fi
        # Package and publish to pypi (if on release)
        echo "TRAVIS_BRANCH = $TRAVIS_BRANCH"

        KEYID=$(cat dev/public_gpg_key)
        echo "KEYID = '$KEYID'"
        if [[ "$TRAVIS_BRANCH" == "release" ]]; then
            # use set +x to log all intermediate commands 
            export CURRENT_BRANCH=$TRAVIS_BRANCH
            TAG_AND_UPLOAD=yes
        else
            TAG_AND_UPLOAD=no
        fi
        MB_PYTHON_TAG=$MB_PYTHON_TAG \
            USE_GPG=True \
            GPG_KEYID=$KEYID \
            CURRENT_BRANCH=$TRAVIS_BRANCH \
            TWINE_PASSWORD=$PYUTILS_TWINE_PASSWORD \
            TWINE_USERNAME=$PYUTILS_TWINE_USERNAME \
            GPG_EXECUTABLE=$GPG_EXECUTABLE \
            DEPLOY_BRANCH=release \
            TAG_AND_UPLOAD=$TAG_AND_UPLOAD \
            ./publish.sh
      fi
    #- | 
    #    __heredoc__='''
    #    # Load or generate secrets
    #    source $(secret_loader.sh)
    #    echo $PYUTILS_TWINE_USERNAME
    #    echo $PYUTILS_TWINE_PASSWORD
    #    echo $PYUTILS_CI_GITHUB_SECRET

    #    # encrypt relevant travis variables
    #    travis encrypt PYUTILS_TWINE_USERNAME=$PYUTILS_TWINE_USERNAME 
    #    travis encrypt PYUTILS_TWINE_PASSWORD=$PYUTILS_TWINE_PASSWORD  
    #    travis encrypt PYUTILS_CI_GITHUB_SECRET=$PYUTILS_CI_GITHUB_SECRET

    #    # HOW TO ENCRYPT YOUR SECRET GPG KEY
    #    IDENTIFIER=PyUtils
    #    KEYID=$(gpg --list-keys --keyid-format LONG "$IDENTIFIER" | head -n 2 | tail -n 1 | awk '{print $1}' | tail -c 9)
    #    echo "KEYID = $KEYID"

    #    # Export plaintext gpg public keys, private keys, and trust info
    #    mkdir -p dev
    #    gpg --armor --export-secret-keys $KEYID > dev/travis_secret_gpg_key.pgp
    #    gpg --armor --export $KEYID > dev/travis_public_gpg_key.pgp
    #    gpg --export-ownertrust > dev/gpg_owner_trust

    #    # Encrypt gpg keys and trust with travis secret
    #    TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_public_gpg_key.pgp > dev/travis_public_gpg_key.pgp.enc
    #    TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_secret_gpg_key.pgp > dev/travis_secret_gpg_key.pgp.enc
    #    TSP=$PYUTILS_CI_GITHUB_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/gpg_owner_trust > dev/gpg_owner_trust.enc
    #    echo $KEYID > dev/public_gpg_key

    #    source $(secret_unloader.sh)

    #    # Look at what we did, clean up, and add it to git
    #    ls dev/*.enc
    #    rm dev/gpg_owner_trust dev/*.pgp
    #    git status
    #    git add dev/*.enc
    #    git add dev/public_gpg_key
    #    '''  # <hack vim "regex" parser> '
    #
